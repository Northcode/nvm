 _________________________________________________________________________
| .__   __.____    ____.___  ___.       ___          _______.___________. |
| |  \ |  |\   \  /   /|   \/   |      /   \        /       |           | |
| |   \|  | \   \/   / |  \  /  |     /  ^  \      |   (----`---|  |----` |
| |  . `  |  \      /  |  |\/|  |    /  /_\  \      \   \       |  |	  |
| |  |\   |   \    /   |  |  |  |   /  _____  \ .----)   |      |  |	  |
| |__| \__|    \__/    |__|  |__|  /__/     \__\|_______/       |__|	  |
|_________________________________________________________________________|

stmt	:=	
	x	|	expr								//expr
	x	|	var name [as type] [= expr]			//declare var
	x	|	name = expr							//set var
	x	|	def name(args) [as type] stmt		//define function
	x	|	stmt[^"end"]*						//list
	x	|	class name [: [name]+]* stmt end	//define class
	x	|	return expr							//return value

name	:=	word	//variable names
args	:=	[type name]*

expr	:=	
	x	|	expr[,expr]*				//list
	x	|	int							//int		LITERALS
	x	|	float						//float		   "
	x	|	string						//string	   "
	x	|	bool						//bool		   "
	x	|	byte						//byte		   "
	x	|	name						//variable
	x	|	name(expr)					//function call
	x	|	expr +|-|*|/|%|^ expr		//arithmetic expr
	-	|	(args) => stmt				//lambda
		|	expr as type				//casting
		|	new type[(expr)]			//create new instance of object pass arguments if constructor needs it
		|	expr.expr					//access field
		|	&expr						//get function pointer